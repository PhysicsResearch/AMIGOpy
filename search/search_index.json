{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AMIGOpy","text":""},{"location":"#welcome-to-the-amigopy-documentation","title":"Welcome to the AMIGOpy Documentation","text":"<p>This site documents the AMIGOpy software, including its main functionalities, coding standards, and development roadmap.</p> <p>Note for developers  This documentation includes in-depth details about the source code, architecture, and contribution guidelines. Regular users should focus on the pages describing the main features, user guides, and roadmap \u2014 no need to dive into implementation details unless you're contributing.</p>"},{"location":"#overview","title":"Overview","text":"<p>AMIGOpy is a medical imaging toolkit designed to support radiotherapy research and clinical workflows.</p> <p>It provides tools for:</p> <ul> <li>\u26a1 Radiotherapy workflows \u2014 treatment planning, data handling, and advanced analysis</li> <li>\ud83e\udde9 Segmentation &amp; Autocontouring \u2014 integrated with AI-based APIs and customizable pipelines</li> <li>\ud83c\udfb2 Monte Carlo simulation \u2014 dose calculation, modeling, and validation for research and clinical applications</li> <li>\ud83c\udf10 3D / 4D Rendering \u2014 high-quality visualization for volumetric and time-resolved imaging data</li> <li>\ud83e\udde0 Research &amp; Development \u2014 flexible tools for rapid prototyping, innovation, and integration with external platforms</li> </ul> <p>AMIGOpy is designed to bring together automation, research tools, and clinical support into a single, extensible platform. It not only provides built-in functionalities but also integrates and expands upon community-driven developments, creating a powerful and collaborative software ecosystem.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#1-installation","title":"1. Installation","text":"<p>See Installation Step-by-step instructions for installing both the compiled version and the developer setup.</p>"},{"location":"#2-coding-documentation-guidelines","title":"2. Coding &amp; Documentation Guidelines","text":"<p>See Software Documentation Guidelines Clear standards for writing docstrings, using type hints, and maintaining consistent code style. These rules are mandatory for all contributors.</p> <ul> <li>\ud83d\udcdd Docstring rules: Docstring Guidelines</li> <li>\ud83d\udd20 Type hints: Typing Guidelines</li> </ul>"},{"location":"#3-software-variables-developer-notes","title":"3. Software Variables &amp; Developer Notes","text":"<p>See General Variable Descriptions An overview of variable naming conventions, data structures, and core architecture.</p>"},{"location":"about/","title":"About AMIGOpy","text":"<p>AMIGOpy is an open-source medical physics platform designed for research and education in radiotherapy and brachytherapy. It is the successor to the original AMIGO software developed between 2011 and 2015 as part of a Double-PhD project. Initially, AMIGO was created primarily as a research tool for brachytherapy, but over the years, the software evolved to include resources for external beam radiotherapy, including photons and protons.</p> <p>Despite this growth, the use of the original AMIGO software remained limited to specific research groups and collaborations \u2014 mainly due to the lack of proper documentation and several design constraints.</p>"},{"location":"about/#limitations-of-the-original-amigo-matlab-version","title":"Limitations of the Original AMIGO (MATLAB Version)","text":"<p>The initial AMIGO implementation, developed in MATLAB, provided valuable functionality but suffered from several important limitations:</p> <ul> <li>Lack of documentation \u2192 made onboarding new users and contributors difficult.</li> <li>Non-modular architecture \u2192 upgrades were hard to manage, and many available tools were hidden from the user.</li> <li>MATLAB dependency \u2192 although MATLAB offers powerful scientific tools and a user-friendly language, it is not free, limiting access to many potential users.</li> <li>Monte Carlo engine licensing \u2192 the software relied heavily on MCNP, which also requires a paid license for each user, further restricting accessibility.</li> </ul>"},{"location":"about/#introducing-amigopy","title":"Introducing AMIGOpy","text":"<p>AMIGOpy was created to address these limitations and to significantly expand AMIGO's impact in research and education.</p> <p>Key advantages of AMIGOpy:</p> <ul> <li>Open-source \u2192 freely available for research, education, and development.</li> <li>Python-based \u2192 built using Python, an accessible and free programming language widely adopted in the scientific community.</li> <li>Extensive documentation \u2192 provides comprehensive guides for both users and developers.</li> <li>Modular architecture \u2192 designed from the ground up for maintainability, making it easier to integrate new features and workflows.</li> <li>Flexible Monte Carlo integration \u2192 can be coupled to numerous MC engines, not limited to MCNP, making the platform far more versatile.</li> </ul> <p>With AMIGOpy, our goal is to increase accessibility, foster collaboration, and accelerate innovation in medical physics research.</p>"},{"location":"installation/","title":"Installation","text":"<p>This page explains how to install AMIGO using two different methods:</p> <ul> <li>Option 1: Download the compiled version (Windows only) (recommended for most users)</li> <li>Option 2: Install from source using Anaconda (recommended for developers)</li> </ul> <p>Target Python version: \u2265 3.11</p>"},{"location":"installation/#option-1-download-compiled-version-windows-only","title":"Option 1 \u2014 Download Compiled Version (Windows Only)","text":"<p>This is the easiest way to install and run AMIGO without setting up Python or dependencies manually.</p> <ol> <li>Go to the AMIGO Releases.</li> <li>Download the latest <code>.exe</code> installer.</li> <li>Run the installer and follow the on-screen instructions.</li> <li>Launch AMIGO from the Start Menu or Desktop shortcut.</li> </ol> <p>Note: The compiled version may not always include the very latest changes. For development, use Option 2.</p>"},{"location":"installation/#option-2-install-from-source-recommended-for-developers","title":"Option 2 \u2014 Install from Source (Recommended for Developers)","text":"<p>This option is ideal if you plan to contribute, debug, or modify AMIGO. We recommend using Anaconda to create a dedicated virtual environment, ensuring all dependencies are correctly managed and isolated.</p>"},{"location":"installation/#21-install-anaconda","title":"2.1 \u2014 Install Anaconda","text":"<p>Download and install Anaconda from the official website:</p> <p>https://www.anaconda.com/download</p> <p>Tip: Anaconda simplifies package management and ensures a reproducible setup.</p>"},{"location":"installation/#22-install-git-optional","title":"2.2 \u2014 Install Git (Optional)","text":"<p>We recommend installing Git so you can clone the repository instead of downloading it manually.</p> <p>Important: Run the following commands in an Anaconda Prompt (Windows) or terminal (macOS/Linux):</p> <pre><code>conda install git\n</code></pre> <ul> <li>If you don\u2019t want to use Git, you can download the source code manually as a <code>.zip</code> file.</li> <li>You don\u2019t need to create a specific folder manually. Git will automatically create a folder called <code>AMIGOpy</code> when cloning.</li> </ul>"},{"location":"installation/#23-clone-the-repository-recommended","title":"2.3 \u2014 Clone the Repository (Recommended)","text":"<pre><code>git clone https://github.com/PhysicsResearch/AMIGOpy.git\ncd AMIGOpy\n</code></pre>"},{"location":"installation/#24-or-download-the-source-manually","title":"2.4 \u2014 Or Download the Source Manually","text":"<ol> <li>Go to the AMIGO GitHub repository.</li> <li>Click Code \u2192 Download ZIP.</li> <li>Extract the archive to a desired folder.</li> </ol>"},{"location":"installation/#25-create-and-activate-a-conda-environment","title":"2.5 \u2014 Create and Activate a Conda Environment","text":"<p>Use the provided <code>amigo.yml</code> file to ensure correct dependencies:</p> <pre><code>conda env create -f amigo.yml\nconda activate amigo\n</code></pre>"},{"location":"installation/#26-run-amigo","title":"2.6 \u2014 Run AMIGO","text":"<pre><code>python Launch_ImGUI.py\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Dependency conflicts \u2192 Remove your environment and recreate it using:</li> </ul> <p><pre><code>conda env remove -n amigo\nconda env create -f amigo.yml\n</code></pre> * Issues running compiled version \u2192 Check the GitHub Issues.</p> <p>For advanced usage and development setup, see the Developer Guide.</p>"},{"location":"references/","title":"AMIGOpy References","text":"<p>The new Python implementation, which is currently under development, has recently been made public as an alpha (test version) as the codebase has become more mature, aiming to expand accessibility and foster collaboration.</p> <p>Publication referring to AMIGO(py)</p>"},{"location":"references/#key-publications-using-amigo-amigopy","title":"Key Publications Using AMIGO / AMIGOpy","text":""},{"location":"references/#2025","title":"2025","text":"<ul> <li>Evaluating photon-counting computed tomography for quantitative material characteristics and material differentiation in radiotherapy Phys Med Biol. 2025 May 13; 70(10).   https://doi.org/10.1088/1361-6560/add3ba</li> </ul>"},{"location":"references/#2024","title":"2024","text":"<ul> <li>Development of a novel 3D-printed dynamic anthropomorphic thorax phantom for evaluation of four-dimensional computed tomography Phys Imaging Radiat Oncol. 2024 Oct 2.   https://doi.org/10.1016/j.phro.2024.100656</li> </ul>"},{"location":"references/#2023","title":"2023","text":"<ul> <li>AAPM WGDCAB Report 372: A joint AAPM, ESTRO, ABG, and ABS report on commissioning of model-based dose calculation algorithms in brachytherapy Med Phys. 2023 Aug.   https://doi.org/10.1002/mp.16571</li> </ul>"},{"location":"references/#2021","title":"2021","text":"<ul> <li>Validation of the collapsed cone algorithm for HDR liver brachytherapy against Monte Carlo simulations Brachytherapy. 2021 Jul\u2013Aug.   https://doi.org/10.1016/j.brachy.2021.03.018</li> </ul>"},{"location":"references/#2020","title":"2020","text":"<ul> <li>The dosimetric impact of replacing the TG-43 algorithm by model-based dose calculation for liver brachytherapy Radiat Oncol. 2020 Mar.   https://doi.org/10.1186/s13014-020-01492-9</li> </ul>"},{"location":"references/#2014","title":"2014","text":"<ul> <li>A medical image-based graphical platform \u2014 Features, applications and relevance for brachytherapy Brachytherapy. 2014 Nov\u2013Dec.   https://doi.org/10.1016/j.brachy.2014.07.004</li> </ul> <p>For installation instructions, see the Installation Guide. For more information about AMIGOpy, visit the About AMIGOpy page.</p>"},{"location":"DevGuidelines/Docstring/","title":"Docstring Guidelines","text":"<p>This document defines how to write docstrings for this project. We follow NumPy-style docstrings combined with Python type hints for clarity and consistency.</p>"},{"location":"DevGuidelines/Docstring/#1-general-rules","title":"1. General Rules","text":"<ul> <li>Use Python type hints \u2192 types go in the function signature, not duplicated in the docstring.</li> <li>Use NumPy-style docstrings:</li> <li>Clear structure.</li> <li>Easy to read.</li> <li>Compatible with automated documentation tools.</li> <li>A docstring should explain:</li> <li>What the function/class/module does.</li> <li>Meaning and units of parameters.</li> <li>What is returned.</li> <li>Modifications to attributes or global state.</li> <li>Functions called (if relevant).</li> <li>Exceptions raised.</li> <li>Keep trivial functions one-liners; describe complex functions thoroughly.</li> </ul>"},{"location":"DevGuidelines/Docstring/#2-docstring-structure","title":"2. Docstring Structure","text":"<p>Recommended sections (in order):</p> Section Purpose Required Summary Short, imperative description \u2705 Yes Parameters Describe purpose, meaning, and units \u2705 Yes Returns Describe returned values \u2705 Yes Modifies List attributes or globals changed \u26a0\ufe0f If applicable Calls List important functions invoked \u2705 Yes Raises List exceptions \u26a0\ufe0f If applicable Notes Assumptions, limitations, etc. Optional Examples Demonstrate usage Optional"},{"location":"DevGuidelines/Docstring/#3-canonical-example","title":"3. Canonical Example","text":"<pre><code>def update_dose_matrix(\n    rt_dose: pydicom.dataset.FileDataset,\n    new_matrix: np.ndarray,\n    normalize: bool = True,\n) -&gt; None:\n    \"\"\"\n    Update the dose matrix inside an RTDOSE DICOM object.\n\n    Parameters\n    ----------\n    rt_dose\n        DICOM RTDOSE dataset to update.\n    new_matrix\n        New 3D dose grid (z, y, x), in Gy.\n    normalize\n        Whether to rescale values to match `DoseGridScaling`.\n\n    Returns\n    -------\n    None\n\n    Modifies\n    --------\n    rt_dose.pixel_array\n        Replaces the internal dose grid with `new_matrix`.\n    rt_dose.DoseGridScaling\n        Updated if `normalize=True`.\n\n    Calls\n    -----\n    - `validate_dose_matrix`\n    - `rescale_dose`\n\n    Raises\n    ------\n    ValueError\n        If `new_matrix` has incompatible shape or NaNs.\n\n    Notes\n    -----\n    Persist changes with `pydicom.dcmwrite` after this call.\n    \"\"\"\n</code></pre>"},{"location":"DevGuidelines/Software-documentation-guidelines/","title":"Docstring &amp; Type Hint Guidelines","text":"<p>This page defines the conventions for writing docstrings (see Docstring Guidelines) and using type hints (see Typing Guidelines) in this project. We follow NumPy-style docstrings and use Python type hints as the single source of truth for parameter and return types. Target runtime: Python \u2265 3.11.</p>"},{"location":"DevGuidelines/Software-documentation-guidelines/#1-general-principles","title":"1. General Principles","text":"<ul> <li>Always use Python type hints \u2192 types live in the function signature, not duplicated in the docstring.</li> <li> <p>Docstrings focus on:</p> </li> <li> <p>What the function does.</p> </li> <li>Meaning and units of parameters.</li> <li>Return value meaning.</li> <li>State/variables updated (Modifies).</li> <li>Functions called (Calls).</li> <li>Expected errors (Raises).</li> <li>Use NumPy-style sections for readability and doc tool compatibility.</li> </ul>"},{"location":"DevGuidelines/Software-documentation-guidelines/#2-example-function-with-full-docstring","title":"2. Example Function with Full Docstring","text":"<p>Below is an example that demonstrates the recommended style for docstrings and type hints in this project. It shows how to document parameters, returns, modifications, calls, and exceptions.</p> <pre><code>from pathlib import Path\nfrom typing import Final\n\nimport numpy as np\nimport numpy.typing as npt\nimport pydicom\nfrom pydicom.dataset import FileDataset\n\n# Example constant with a type hint\nEPS: Final[float] = 1e-12\n\n\ndef update_dose_matrix(\n    rt_dose: FileDataset,\n    new_matrix: npt.NDArray[np.float32],  # shape: (z, y, x), Gy\n    normalize: bool = True,\n) -&gt; None:\n    \"\"\"\n    Update the dose matrix inside an RTDOSE DICOM object.\n\n    Parameters\n    ----------\n    rt_dose\n        DICOM RTDOSE dataset to update.\n    new_matrix\n        New 3D dose grid ``(z, y, x)`` in **Gy**.\n    normalize\n        If ``True``, rescale values to match ``DoseGridScaling``.\n\n    Returns\n    -------\n    None\n\n    Modifies\n    --------\n    rt_dose.pixel_array\n        Replaces the internal dose grid with ``new_matrix``.\n    rt_dose.DoseGridScaling\n        Updated if ``normalize=True``.\n\n    Calls\n    -----\n    validate_dose_matrix, rescale_dose\n\n    Raises\n    ------\n    ValueError\n        If ``new_matrix`` has incompatible shape or contains NaNs.\n    \"\"\"\n    # (implementation here)\n    pass\n</code></pre>"},{"location":"DevGuidelines/Software-documentation-guidelines/#3-typing-examples-python-311-syntax","title":"3. Typing Examples (Python 3.11 syntax)","text":"<p>Use modern forms (<code>|</code> unions, built\u2011in generics) and concrete library types.</p> <pre><code>from pathlib import Path\nimport SimpleITK as sitk\nimport pydicom\nfrom pydicom.dataset import FileDataset\n\n# Accept both strings and Paths; may return nothing\n\ndef load_rtplan(path: str | Path | None = None) -&gt; FileDataset | None:\n    ...\n\n# Simple union narrowing\n\ndef parse_value(x: int | float) -&gt; float:\n    ...\n\n# Tuples with built-in generics\n\ndef resample_ct(img: sitk.Image, spacing: tuple[float, float, float]) -&gt; sitk.Image:\n    ...\n\n# Collections with built-in generics\n\ndef summarize(ds_list: list[FileDataset]) -&gt; dict[str, str]:\n    ...\n</code></pre> <p>Tip: For arrays, prefer <code>numpy.typing.NDArray</code> with explicit dtypes, e.g. <code>npt.NDArray[np.float32]</code>.</p>"},{"location":"DevGuidelines/Software-documentation-guidelines/#4-docstring-template-numpy-style","title":"4. Docstring Template (NumPy style)","text":"<p>Copy this template when adding new functions.</p> <pre><code>def function_name(param1: int, param2: str | None = None) -&gt; bool:\n    \"\"\"\n    One-sentence summary in the imperative mood.\n\n    Extended description (what, why, and context). Keep types in the signature,\n    and focus here on meaning, units, shapes, side effects, and behavior.\n\n    Parameters\n    ----------\n    param1\n        Meaning of param1; units if applicable.\n    param2\n        Meaning of param2; when ``None`` is allowed and what it means.\n\n    Returns\n    -------\n    bool\n        What ``True``/``False`` indicate.\n\n    Modifies\n    --------\n    obj.attr\n        What object/attribute is modified (if any).\n\n    Calls\n    -----\n    other_function, helper\n\n    Raises\n    ------\n    ValueError\n        When inputs are invalid (describe conditions).\n    RuntimeError\n        When an unexpected state is encountered.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"DevGuidelines/Software-documentation-guidelines/#5-common-pitfalls","title":"5. Common Pitfalls","text":"<ul> <li>Don\u2019t duplicate types in the docstring \u2014 keep them in the signature.</li> <li>Document shapes and units (e.g., <code>(z, y, x)</code>, <code>mm</code>, <code>Gy</code>) in the docstring text.</li> <li>Prefer concrete library types: <code>sitk.Image</code>, <code>pydicom.dataset.FileDataset</code>.</li> <li>Be precise with <code>Path</code>: accept <code>str | Path</code> in public APIs.</li> <li>Use <code>Final</code> for constants and annotate dataclass/attrs fields.</li> </ul>"},{"location":"DevGuidelines/Typing/","title":"Typing Guidelines","text":"<p>This document is the authoritative reference for using Python type hints in this project. We target Python \u2265 3.11. Follow these guidelines to keep code consistent, analyzable, and well-documented.</p>"},{"location":"DevGuidelines/Typing/#what-is-typing","title":"What is \"typing\"?","text":"<p>Typing means annotating function signatures and variables with explicit types so both humans and tools understand your code better.</p> <p>Example:</p> <pre><code>from pathlib import Path\n\ndef load_bytes(path: str | Path) -&gt; bytes:\n    \"\"\"Read a file and return its raw bytes.\"\"\"\n    p = Path(path)\n    return p.read_bytes()\n\n# Editors + checkers will now warn:\nload_bytes(123)        # \u274c int is not str|Path\nload_bytes(\"data.bin\") # \u2705 ok\n</code></pre> <p>Benefits:</p> <ul> <li>Developers see contracts at a glance.</li> <li>Editors provide better completions.</li> <li>Checkers (mypy, pyright, ruff) catch mistakes early.</li> </ul>"},{"location":"DevGuidelines/Typing/#1-principles-scope","title":"1) Principles &amp; Scope","text":"<ul> <li>Annotate everything public: functions, class attributes, constants.</li> <li>Prefer precise types over <code>Any</code> \u2014 use <code>Any</code> only when unavoidable.</li> <li>Use PEP 604 unions (<code>A | B</code>) and PEP 585 built-in generics (<code>list[int]</code>, <code>dict[str, str]</code>).</li> <li>Prefer <code>collections.abc</code> interfaces (<code>Iterable</code>, <code>Mapping</code>, <code>Callable</code>) when exact containers aren\u2019t required.</li> <li>Docstrings describe meaning, units, and behavior \u2014 not types.</li> <li>Enable strict mode in <code>mypy</code> and <code>ruff</code>.</li> </ul>"},{"location":"DevGuidelines/Typing/#2-relevant-standards-peps","title":"2) Relevant Standards (PEPs)","text":"<ul> <li>PEP 484 \u2014 typing basics</li> <li>PEP 585 \u2014 built-in generics (<code>list[int]</code>)</li> <li>PEP 604 \u2014 unions with <code>|</code> (<code>int | float</code>)</li> <li>PEP 612 \u2014 <code>ParamSpec</code>, <code>Concatenate</code></li> <li>PEP 646 \u2014 variadic generics (<code>TypeVarTuple</code>, <code>Unpack</code>)</li> <li>PEP 647 \u2014 <code>TypeGuard</code></li> <li>PEP 655 \u2014 <code>Required</code> / <code>NotRequired</code> for <code>TypedDict</code></li> <li>PEP 673 \u2014 <code>Self</code> type</li> <li>PEP 675 \u2014 <code>LiteralString</code></li> <li>PEP 593 \u2014 <code>Annotated[T, ...]</code> for metadata like units</li> </ul> <p>Python \u22653.11: No need for <code>from __future__ import annotations</code>.</p>"},{"location":"DevGuidelines/Typing/#3-core-syntax-examples","title":"3) Core Syntax Examples","text":"<pre><code># Unions / Optional\ndef load(path: str | None) -&gt; bytes | None: ...\n</code></pre> <pre><code># Collections\nfrom collections.abc import Iterable, Mapping\n\ndef uniq(xs: Iterable[int]) -&gt; list[int]: ...\ndef normalize_map(m: Mapping[str, float]) -&gt; dict[str, float]: ...\n</code></pre> <pre><code># Callables\nfrom collections.abc import Callable\n\ndef retry(fn: Callable[[], int], attempts: int = 3) -&gt; int: ...\n</code></pre> <pre><code># TypedDict\nfrom typing import TypedDict, Required, NotRequired\n\nclass SeriesMeta(TypedDict):\n    modality: Required[str]\n    description: NotRequired[str]\n</code></pre> <pre><code># Methods returning the same type\nfrom typing import Self\n\nclass Volume:\n    def copy(self) -&gt; Self: ...\n</code></pre>"},{"location":"DevGuidelines/Typing/#4-numpy-typing-project-standard","title":"4) NumPy Typing (Project Standard)","text":"<p>Use <code>numpy.typing.NDArray</code>:</p> <pre><code>import numpy as np\nimport numpy.typing as npt\n\ndef normalize(vol: npt.NDArray[np.float32]) -&gt; npt.NDArray[np.float32]:\n    \"\"\"Scale to [0, 1]. Shape: (z, y, x).\"\"\"\n    ...\n\ndef mask_volume(vol: npt.NDArray[np.float32],\n                mask: npt.NDArray[np.bool_]) -&gt; npt.NDArray[np.float32]:\n    \"\"\"Apply binary mask.\"\"\"\n    ...\n\ndef transform_points(pts: npt.NDArray[np.float64],\n                     T: npt.NDArray[np.float64]) -&gt; npt.NDArray[np.float64]:\n    \"\"\"pts: (N,3), T: (4,4).\"\"\"\n    ...\n</code></pre> <p>For variable shapes, use:</p> <pre><code>from collections.abc import Sequence\n\ndef bbox_from_points(points: Sequence[Sequence[float]]) -&gt; tuple[float, float, float, float, float, float]:\n    \"\"\"Compute bounding box from list of 3D points.\"\"\"\n    ...\n</code></pre>"},{"location":"DevGuidelines/Typing/#5-pandas-typing","title":"5) pandas Typing","text":"<pre><code>import pandas as pd\n\ndef clean_table(df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Return a cleaned and standardized DataFrame.\"\"\"\n    ...\n</code></pre> <p>Example: Split by modality</p> <pre><code>def split_by_modality(df: pd.DataFrame) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"Return (CT_df, MR_df) filtered by df[\"Modality\"].\"\"\"\n    df_ct = df[df[\"Modality\"] == \"CT\"]\n    df_mr = df[df[\"Modality\"] == \"MR\"]\n    return df_ct, df_mr\n</code></pre>"},{"location":"DevGuidelines/Typing/#6-simpleitk-pydicom","title":"6) SimpleITK &amp; pydicom","text":"<p>Prefer concrete library types:</p> <pre><code>import SimpleITK as sitk\nfrom pydicom.dataset import FileDataset\n\ndef resample(im: sitk.Image, to_like: sitk.Image) -&gt; sitk.Image: ...\ndef read_rt_dose(path: str | Path) -&gt; FileDataset: ...\n</code></pre>"},{"location":"dev/changelog/","title":"Changelog","text":"<ul> <li>Initial docs.</li> </ul>"},{"location":"dev/contributing/","title":"Contributing","text":"<p>Thanks for helping improve AMIGOpy!</p>"},{"location":"dev/variables%26structures/General_variable_descriptions/","title":"AMIGOpy Variables and File Categories","text":"<p>AMIGOpy supports multiple file extensions and automatically groups them into categories. This approach ensures that the particularities of each supported format are abstracted into unified categories, allowing the software to behave more consistently and predictably.</p> <p>The two main categories currently supported are:</p> <ul> <li>Medical Images -  Detailed info - Medical Image Structure in AMIGOpy</li> <li>3D Objects </li> </ul> <p>Each category is briefly described below with more details about python structure in category-specific pages.</p>"},{"location":"dev/variables%26structures/General_variable_descriptions/#medical-images","title":"Medical Images","text":"<p>Medical imaging data is a central part of AMIGOpy's workflow. This category includes both DICOM and NIfTI formats, automatically normalized to a category-based structure for consistent behavior across the software.</p>"},{"location":"dev/variables%26structures/General_variable_descriptions/#supported-extensions","title":"Supported Extensions","text":"Format Extensions Description DICOM <code>.dcm</code> Medical images and metadata in DICOM standard format. RT Plan <code>.dcm</code> DICOM radiotherapy plans, stored under the medical image category. RT Struct <code>.dcm</code> DICOM structure sets, containing contour and region information. RT Dose <code>.dcm</code> DICOM radiotherapy dose distributions. NIfTI <code>.nii</code>, <code>.nii.gz</code> Neuroimaging format widely used for research; fully integrated in AMIGOpy."},{"location":"dev/variables%26structures/General_variable_descriptions/#internal-representation","title":"Internal Representation","text":"<p>Internally, AMIGOpy converts all formats into a common structure stored within:</p> <pre><code>self.medical_images\n</code></pre>"},{"location":"dev/variables%26structures/General_variable_descriptions/#3d-objects","title":"3D Objects","text":"<p>AMIGOpy also supports loading 3D object files used in simulations, phantom design, and visualizations. These files are grouped under the <code>3d_objects</code> category, ensuring consistent handling of geometry and surface data.</p>"},{"location":"dev/variables%26structures/General_variable_descriptions/#supported-extensions_1","title":"Supported Extensions","text":"Format Extensions Description STL <code>.stl</code> Widely used for 3D printing and phantom design. OBJ <code>.obj</code> Standard geometry and surface definition files for visualization. 3MF <code>.3mf</code> Modern 3D format supporting colors, textures, and metadata."},{"location":"dev/variables%26structures/General_variable_descriptions/#internal-representation_1","title":"Internal Representation","text":"<p>All loaded 3D object data is stored within the variable:</p> <pre><code>self.objects_3d\n</code></pre>"},{"location":"dev/variables%26structures/MedicalImage_type/","title":"Medical Image Structure in AMIGOpy","text":"<p>AMIGOpy supports multiple medical image formats and stores both images and metadata in a unified format. Regardless of the original file type (DICOM, NIfTI, MHA, NRRD, etc.), all formats are automatically converted into this structure to ensure consistency across the software to ensure consistent behavior across modules (loading, visualization, segmentation, Monte Carlo simulation, and export).</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#supported-planned-formats","title":"\u2705 Supported &amp; Planned Formats","text":"<p>Core (supported / priority): - \ud83d\udcc4 DICOM (<code>.dcm</code>) \u2014 clinical standard, includes RTDose/RTStruct/RTPlan - \ud83e\udde9 NIfTI (<code>.nii</code>, <code>.nii.gz</code>) \u2014 compact, common in AI and research</p> <p>Planned: - \ud83e\uddea MHA / MHD (<code>.mha</code>, <code>.mhd</code> + raw) \u2014 native to ITK/ANTs pipelines - \ud83e\uddf1 NRRD / NRD (<code>.nrrd</code>, <code>.nrd</code>) \u2014 efficient for volumetric data and masks - \ud83d\uddc2 HDF5 (<code>.h5</code>) \u2014 bundles volumes + masks + metadata for AI workflows - \u26a1 NPZ / NPY (<code>.npz</code>, <code>.npy</code>) \u2014 fast NumPy storage for preprocessed data</p> <p>\ud83d\udd01 All input formats are normalized into the same internal representation described below.</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#data-hierarchy","title":"\ud83d\udccc Data Hierarchy","text":"Accessing a Series in AMIGOpy<pre><code>self.medical_image[patientID][studyID][modality][series_index]\n</code></pre> Level Type Description <code>patientID</code> <code>dict</code> Dictionary containing all studies for a given patient <code>studyID</code> <code>dict</code> Dictionary containing modalities available within the study <code>modality</code> <code>dict</code> Dictionary containing imaging modalities (e.g. CT, MR, RTDOSE) <code>series_index</code> <code>int</code> Index into a list of series dictionaries under this modality"},{"location":"dev/variables%26structures/MedicalImage_type/#series-index-vs-series-dict","title":"\ud83d\udce6 Series Index vs Series Dict","text":"<ul> <li><code>series_index</code> \u2192 integer index into the list of series dictionaries </li> <li>Each series_dict represents one imaging series and contains:</li> </ul>"},{"location":"dev/variables%26structures/MedicalImage_type/#1-metadata","title":"1. Metadata","text":"<ul> <li>Voxel spacing (<code>PixelSpacing</code>)</li> <li>Slice thickness</li> <li>Image orientation</li> <li>Modality type</li> <li>Study and series descriptions</li> <li>Original file path and format-specific tags</li> <li>...</li> </ul>"},{"location":"dev/variables%26structures/MedicalImage_type/#2-voxel-data","title":"2. Voxel Data","text":"<ul> <li><code>3DMatrix</code> \u2192 a NumPy 3D array storing the full volumetric dataset</li> </ul>"},{"location":"dev/variables%26structures/MedicalImage_type/#3-series-add-ons","title":"3. Series Add-ons","text":"<ul> <li><code>structures</code> \u2192 ROI masks and contours</li> <li><code>density_maps</code> \u2192 HU \u2192 density conversions for dose calculation</li> <li><code>material_maps</code> \u2192 tissue/material assignments for Monte Carlo simulation</li> </ul> <p>\ud83d\udca1 For implementation details, see the dedicated sections: Structures \u00b7 Density &amp; Material Maps \u00b7 Export</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#coordinate-system-orientation","title":"\ud83e\udded Coordinate System &amp; Orientation","text":"<p>To guarantee compatibility across modules:</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#1-normalize-orientation-at-load-time","title":"1. Normalize orientation at load time","text":"<p>Reorient volume data into a single, agreed coordinate convention (e.g. patient-based LPS/RAS or a fixed axis order).</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#2-standardize-voxel-axis-order","title":"2. Standardize voxel axis order","text":"<p>Choose a canonical NumPy layout, for example:</p>"},{"location":"dev/variables%26structures/MedicalImage_type/#series-metadata-overview","title":"\ud83d\uddc2\ufe0f Series Metadata Overview","text":"<p>The internal structure is a nested mapping down to a list of series:</p> Build_series_dict example<pre><code>    \"\"\"\n    Build the internal AMIGOpy series dictionary.\n\n    Parameters\n    ----------\n    series_number : str | int\n    spacing : tuple[float, float, float]   # (dx, dy, dz)\n    origin  : tuple[float, float, float]   # DICOM-style origin\n    size    : tuple[int, int, int]         # (nx, ny, nz)\n    vol     : np.ndarray                   # 3D numpy array (standardized orientation)\n    path    : str\n    nifti_meta : dict | None\n    \"\"\"\n    return {\n        'SeriesNumber': series_number,\n        'metadata': {\n            'PixelSpacing': spacing[0:2],\n            'SliceThickness': spacing[2] if len(spacing) &gt;= 3 else 1.0,\n            'ImagePositionPatient': origin,\n            'ImageOrientationPatient': \"N/A\",\n            'RescaleSlope': \"N/A\",\n            'RescaleIntercept': \"N/A\",\n            'WindowWidth': \"N/A\",\n            'WindowCenter': \"N/A\",\n            'SeriesDescription': series_number,\n            'StudyDescription': '',\n            'ImageComments': '',\n            'DoseGridScaling': \"N/A\",\n            'AcquisitionNumber': \"N/A\",\n            'Modality': \"Medical\",\n            'LUTLabel': \"N/A\",\n            'LUTExplanation': \"N/A\",\n            'size': size,\n            'DataType': 'Nifti',\n            'DCM_Info': None,\n            'Nifti_info': nifti_meta,\n            'OriginalFilePath': path,\n        },\n        'images': {},\n        'ImagePositionPatients': [],\n        'SliceImageComments': {},\n        '3DMatrix': vol,\n        'AM_name': None,\n        'US_name': None,\n    }\n</code></pre>"}]}