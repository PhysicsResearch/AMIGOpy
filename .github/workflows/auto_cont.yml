name: Build AMIGOpy (GUI) and Segmentator API (unsigned)

on:
  push:
    branches: [ auto_cont ]
  workflow_dispatch:

jobs:
  build-amigo-gui:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Miniconda (GUI env)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          python-version: "3.11"
          environment-file: amigo.yml          # <- light GUI env
          activate-environment: amigo
          auto-update-conda: true

      # If graphviz is in amigo.yml, add its bin to PATH so dot.exe is found
      - name: Add Graphviz to PATH (conda)
        shell: powershell
        run: echo "$env:CONDA_PREFIX\Library\bin" >> $env:GITHUB_PATH

      - name: Upgrade pip tooling
        shell: powershell
        run: python -m pip install --upgrade pip wheel setuptools

      - name: Ensure PyInstaller (GUI)
        shell: powershell
        run: pip install pyinstaller

      - name: Build AMIGOpy GUI (PyInstaller onedir)
        shell: powershell
        run: pyinstaller Launch_ImGUI.spec --clean

      - name: Verify GUI dist contents
        shell: powershell
        run: |
          Get-ChildItem -Recurse dist\Launch_ImGUI | Select-Object -First 30 | Format-List -Property FullName,Length

      - name: Install Inno Setup
        shell: powershell
        run: choco install innosetup -y

      - name: Build AMIGOpy installer (compile.iss)
        shell: powershell
        run: '& "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe" compile.iss'

      - name: List installer outputs
        shell: powershell
        run: Get-ChildItem -Recurse Output | Format-List -Property FullName,Length

      - name: Upload AMIGOpy installer (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: AMIGOpy-Installer-unsigned
          path: Output/AMIGOpy-Setup.exe
          if-no-files-found: error
          overwrite: true

  build-segmentator-api:
    runs-on: windows-latest
    env:
      # Workaround for Windows OpenMP runtime clashes (ITK/MKL vs LLVM OMP)
      KMP_DUPLICATE_LIB_OK: "TRUE"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the dedicated heavy env
      - name: Setup Miniconda (API env)
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          python-version: "3.11"
          environment-file: amigo_api.yml      # <- uses --extra-index-url for torch CPU
          activate-environment: amigo_api
          auto-update-conda: true

      - name: Show key versions
        shell: powershell
        continue-on-error: true
        run: |
          $code = @"
          import sys, importlib
          from importlib import metadata as md
          import torch
          print('python', sys.version)
          print('torch', torch.__version__, 'cuda', getattr(torch.version, 'cuda', None))
          def ver(pkg):
              try:
                  print(pkg, md.version(pkg))
              except Exception as e:
                  print(pkg, 'n/a')
          for pkg in ['TotalSegmentator','totalsegmentator','monai','nnunetv2','dicom2nifti','pydicom']:
              ver(pkg)
          "@
          Set-Content -Path version_check.py -Value $code
          python version_check.py

      - name: Ensure PyInstaller (API)
        shell: powershell
        run: pip install pyinstaller

      - name: Build Segmentator API (PyInstaller onedir)
        shell: powershell
        run: pyinstaller segmentator_api.spec --clean

      - name: Verify API dist contents (TS/torch present)
        shell: powershell
        run: |
          $dist = "dist\segmentator_api"

          # torch should be a directory (has DLLs)
          if (!(Test-Path "$dist\torch")) {
            throw "torch missing in dist"
          }

          # totalsegmentator may be inside the PYZ archive; check both places
          $tsDir = Test-Path "$dist\totalsegmentator"

          # Find the PYZ (name can vary; e.g., PYZ-00.pyz)
          $pyz = Get-ChildItem $dist -Filter *.pyz -ErrorAction SilentlyContinue | Select-Object -First 1
          $tsInPyz = $false
          if ($pyz) {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            $zip = [System.IO.Compression.ZipFile]::OpenRead($pyz.FullName)
            try {
              $entry = $zip.Entries | Where-Object { $_.FullName -like 'totalsegmentator/*' } | Select-Object -First 1
              if ($entry) { $tsInPyz = $true }
            } finally { $zip.Dispose() }
          }

          if (-not $tsDir -and -not $tsInPyz) {
            throw "totalsegmentator not found (neither as folder nor in $($pyz.Name))"
          }

          Write-Host "torch OK"
          if ($tsDir) { Write-Host "totalsegmentator present as directory" }
          elseif ($tsInPyz) { Write-Host "totalsegmentator present inside $($pyz.Name)" }

      - name: Install Inno Setup
        shell: powershell
        run: choco install innosetup -y

      - name: Build Segmentator API installer (SegmentatorAPI.iss)
        shell: powershell
        run: '& "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe" SegmentatorAPI.iss'

      - name: List installer outputs
        shell: powershell
        run: Get-ChildItem -Recurse Output | Format-List -Property FullName,Length

      - name: Upload Segmentator API installer (unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: SegmentatorAPI-Installer-unsigned
          path: Output/SegmentatorAPI-Setup.exe
          if-no-files-found: error
          overwrite: true
